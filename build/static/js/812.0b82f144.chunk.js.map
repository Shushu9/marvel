{"version":3,"file":"static/js/812.0b82f144.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        < img style={{ display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} alt='Error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])// eslint-disable-line\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011100) + 1011100); ///(1011400 - 1011000) + 1011000); \n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\" >\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div >\n    )\n\n}\n\n\nconst View = ({ data }) => {\n\n    const { name, description, thumbnail, wiki } = data;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={`https://www.marvel.com/characters/` + name.toLowerCase().replace(/[()']+/g, '').replaceAll(' ', '-')}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki}\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        className=\"button button__secondary\">\n                        <div className=\"inner\">Info</div>\n                    </a>\n                </div>\n            </div>\n        </div >\n    )\n}\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default: throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])// eslint-disable-line\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        //eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n\n","import { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])// eslint-disable-line\n\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return null;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${item.resourceURI.slice(43)}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/marvel/build/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\"\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apikey = 'apikey=daab56063479a88a24c3c45cf237f24b';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apikey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?&${_apikey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apikey}`\r\n        );\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apikey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items ? char.comics.items : ['There are no comics for this character']\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            homepage: comics.urls[0].url,\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n        };\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n    }\r\n}\r\n\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, { method, body, headers });\r\n\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n\r\n            setProcess('error');\r\n            throw (e);\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n        case 'loading':\r\n            return <Spinner />;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage />;\r\n        default: throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","wiki","imgStyle","_jsxs","className","children","href","toLowerCase","replace","replaceAll","target","rel","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","renderItems","arr","items","map","item","i","tabIndex","ref","el","current","onCharSelected","forEach","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","disabled","homepage","comics","_Fragment","Link","to","resourceURI","slice","charId","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","key","value","errorInfo","console","log","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","useHttp","_apiBase","_apikey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}